<snippet>
  <content><![CDATA[
/**
 * @author $1
 * @overview $2
 * @requires $3
 */

var myFeature = (function() {

    var el,
        defaults = {
          el: '$1'
        };

    /**
     * Passes options (if available) and declares variables.
     *
     * @param {Object} options - Optional object that overwrites defaults.
     */
    function init(options) {
      // provide for custom options via init()
      if ( options && typeof(options) === 'object' ) {
        options = {};
        options = \$.extend(true, defaults, options);
      }

      // cache DOM references
      el = document.getElementById(defaults.el);

      run();
    }


    /**
     * Runs bulk of application behavior.
     */
    function run() {
      bindEventHandlers();
    }


    /**
     * Binds event handlers.
     */
    function bindEventHandlers() {
      el.addEventListener('click', doSomething.bind(this), false);
    }


    /**
     * Removes event handlers.
     */
    function removeEventHandlers() {
      el.removeEventListener('click', doSomething.bind(this), false);
    }


    /**
     * App functionality.
     */
    function doSomething(event) {
      event.preventDefault();
      removeEventHandlers();
    }

    return {
      init:init
    };

})();

myFeature.init();
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>module</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.js</scope>
</snippet>
