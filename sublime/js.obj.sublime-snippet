<snippet>
  <content><![CDATA[
/**
 * @author $1
 * @overview $2
 * @requires $3
 */

var myFeature = {

    defaults: {
      el: '$4'
    },

    /**
     * Passes options (if available) and declares variables.
     *
     * @param {Object} options - Optional object that overwrites defaults.
     */
    init: function(options) {
      // provide for custom options via init()
      if ( options && typeof(options) === 'object' ) {
        this.options = {};
        this.options = \$.extend(true, this.defaults, options);
      }

      // cache DOM references
      this.el = document.getElementById(this.defaults.el);

      this.run();
    },


    /**
     * Runs bulk of application behavior.
     */
    run: function() {
      this.bindEventHandlers();
    },


    /**
     * Binds event handlers.
     */
    bindEventHandlers: function() {
      this.el.addEventListener('click', this.doSomething.bind(this), false);
    },


    /**
     * Removes event handlers.
     */
    removeEventHandlers: function() {
      this.el.removeEventListener('click', this.doSomething.bind(this), false);
    },


    /**
     * App functionality.
     */
    doSomething: function(event) {
      event.preventDefault();
      this.removeEventHandlers();
    }

};

myFeature.init();
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>obj</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.js</scope>
</snippet>
